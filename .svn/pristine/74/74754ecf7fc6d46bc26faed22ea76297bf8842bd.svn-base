<?php

namespace frontend\controllers;

use common\component\Controller;
use common\models\User;
use common\models\UserSubscriber;
use common\models\Wall;
use common\models\WallPost;
use frontend\models\AvatarForm;
use yii\data\ActiveDataProvider;
use yii\filters\AccessControl;
use yii\web\Link;
use yii\web\NotFoundHttpException;
use yii\web\Response;
use yii\web\UploadedFile;

class UserController extends Controller
{
	/**
	 * @inheritdoc
	 */
	public function behaviors()
	{
		return [
			'access' => [
				'class' => AccessControl::className(),
				'rules' => [
					[
						'actions' => ['index', 'wall', 'event-list-subscribe', 'event-list-create'],
						'allow'   => true,
						'roles'   => ['?'],
					],
					[
						'allow' => true,
						'roles' => ['@'],
					],
				],
			],
		];
	}

	public function actionEdit()
	{
		return $this->render('edit');
	}

	public function actionAvatarChange()
	{
		$user   = \Yii::$app->user->identity;
		$avatar = new AvatarForm();
		if ($avatar->load($_POST)) {
			$avatar->img = UploadedFile::getInstance($avatar, 'img');
			if ($avatar->validate()) {
				$avatar->save($user);
				return $this->redirect('index');
			}
		}
		return $this->render('avatar-change', ['user' => $user, 'avatar' => $avatar]);
	}

	public function actionIndex($id = null)
	{
		$userView = $id && \Yii::$app->user->identity != $id ? User::findOne($id) : \Yii::$app->user->identity;
		if (!$userView) {
			throw new NotFoundHttpException();
		}
		return $this->render('index', [
			'userAuth' => \Yii::$app->user->identity,
			'userView' => $userView,
		]);
	}

//	/**
//	 * На кого я подписан
//	 * @param $id int ид пользователя
//	 */
//	public function actionSubscribe($id){
//
//	}

//	/**
//	 * Кто подписан
//	 * @param $id int ид пользователя
//	 */
//	public function actionSubscribers($id){
//
//	}
	public function actionWall($id = null)
	{
		$userView = $id && \Yii::$app->user->identity != $id ? User::findOne($id) : \Yii::$app->user->identity;
		if (!$userView) {
			throw new NotFoundHttpException();
		}
		$dataProvider                       = new ActiveDataProvider();
		$dataProvider->pagination->pageSize = 4;
		$dataProvider->query                = Wall::find()
			->select('wall.*')
			->innerJoin(WallPost::tableName(), [
				'and',
				'wall.id=wall_post.wall_id',
				['=', 'target_type', WallPost::TARGET_TYPE_USER],
				['=', 'target_id', $userView->id],
			])
			->orderBy('wall.id DESC');
		$html       = $this->renderPartial('wall', ['userView' => $userView, 'dataProvider' => $dataProvider]);
		$pagination = $dataProvider->getPagination();

		return $this->renderJson([
			'content' => $html,
			'_links'  => Link::serialize($pagination->getLinks(true)),
			'_meta'   => [
				'totalCount'  => $pagination->totalCount,
				'pageCount'   => $pagination->getPageCount(),
				'currentPage' => $pagination->getPage() + 1,
				'perPage'     => $pagination->getPageSize(),
			],
		]);
	}

	/**
	 * Воазращает список событий, на которые пользователь подписан
	 * @return mixed
	 * @throws \yii\web\NotFoundHttpException
	 */
	public function actionEventListSubscribe($id)
	{
		if (!\Yii::$app->request->isAjax)
			throw new NotFoundHttpException;
		$params = array_merge([
			'pageSize' => 3
		], $_GET);
		$user   = User::findOne($id);
		if (!$user)
			throw new NotFoundHttpException;
		$dp                            = new ActiveDataProvider();
		$dp->getPagination()->pageSize = $params['pageSize'];
		$dp->query                     = $user->getEventSubscribe()->checkSubscribe()->orderBy('event.id DESC');
		return $this->renderCollection($dp);
	}

	public function actionEventListCreate($id)
	{
		if (!\Yii::$app->request->isAjax)
			throw new NotFoundHttpException;
		$params = array_merge([
			'pageSize' => 3
		], $_GET);

		$user = User::findOne($id);
		if (!$user)
			throw new NotFoundHttpException;
		$dp                            = new ActiveDataProvider();
		$dp->getPagination()->pageSize = $params['pageSize'];
		$dp->query                     = $user->getEventCreate()->checkSubscribe()->orderBy('event.id DESC');
		return $this->renderCollection($dp);
	}

	public function actionSubscribe($user_id)
	{
		$user = \Yii::$app->user->identity;
		if ($user->id != $user_id && !\Yii::$app->user->isGuest && \Yii::$app->request->isAjax) {
			\Yii::$app->response->format = Response::FORMAT_JSON;
			$model                       = UserSubscriber::find()->where([
				'user_id'       => $user_id,
				'subscriber_id' => $user->id
			])->one();
			if ($model) {
				$wallData = ['from' => $user->id, 'to' => $user_id, 'status' => Wall\SubscribeUser::STATUS_UNSUBSCRIBE];
				$model->delete();
				WallPost::toUser([
					'data' => new Wall\SubscribeUser($wallData)
				], [$user->id, $user_id]);
				return ['error' => false, 'message' => $model->getErrors()];
			} else {
				$wallData = ['from' => $user->id, 'to' => $user_id, 'status' => Wall\SubscribeUser::STATUS_SUBSCRIBE];
				WallPost::toUser([
					'data' => new Wall\SubscribeUser($wallData)
				], [$user->id, $user_id]);
				$model                = new UserSubscriber();
				$model->user_id       = $user_id;
				$model->subscriber_id = $user->id;
				return ['error' => !$model->save(), 'message' => $model->getErrors()];
			}

		}
	}

}
