<?php
/**
 * Created by PhpStorm.
 * User: albert
 * Date: 22.02.15
 * Time: 3:58
 */

namespace frontend\models;


use common\models\Event;
use common\models\EventPrice;
use common\models\Geo;
use common\models\Tag;
use common\models\User;
use common\models\Wall;
use common\models\Wall\NewEvent;
use common\models\WallPost;
use common\models\EventSubscriber;
use Imagine\Image\Box;
use Imagine\Image\ImageInterface;
use yii\base\Model;
use yii\db\ActiveRecord;
use yii\helpers\FileHelper;
use yii\imagine\Image;
use yii\web\UploadedFile;

class EventForm extends Model
{
	public  $name;
	public  $description;
	public  $begin;
	public  $end;
	public  $type;
	public  $geoCoordinates;
	public  $geoTitle;
	public  $geoDescription;
	private $_price = [];
	public  $site;
	/**
	 * @var UploadedFile
	 */
	public $img;
	public $tag;

	public function rules()
	{
		return [
			[
				['name', 'description', 'img', 'geoTitle', 'geoDescription', 'geoCoordinates', 'begin'],
				'required'
			],
			[
				['name', 'geoTitle', 'geoDescription', 'geoCoordinates', 'site'],
				'filter',
				'filter' => function ($value) {
					return htmlspecialchars(trim($value));
				}
			],
			[
				[ 'description'],
				'filter',
				'filter' => function ($value) {
					return nl2br(htmlspecialchars(trim($value)));
				}
			],
			[['site',], 'url', 'defaultScheme' => 'http', 'message' => 'Введите корректный адрес сайта'],
			//			[['price'], 'number', 'min' => 0, 'message' => 'Цена не может быть меньше нуля'],
			[['type'], 'integer'],
			[['name'], 'string', 'max' => 70],
			[['site'], 'string', 'max' => 100],
			[['description'], 'string', 'max' => 2400],
			[['tag', 'end'], 'safe'],
			[
				'img',
				'image',
				'minWidth'   => 200,
				'minHeight'  => 50,
				'maxWidth'   => 3840,
				'maxHeight'  => 3840,
				'mimeTypes'  => 'image/jpg, image/jpeg, image/png, image/gif',
				'extensions' => ['jpg', 'jpeg','png','gif'],
				'maxSize'    => (1024 * 5 * 1024),
                'underWidth'=> 'Изображение слишком маленькое по ширине',
                'underHeight'=>'Изображение слишком маленькое по высоте',
                'overHeight'=>'Изображение слишком большое по высоте',
                'overWidth' => 'Изображение слишком большое по ширине'
			],
		];
	}


	public function attributeLabels()
	{
		return [
			'name'        => 'Название',
			'description' => 'Описание',
			'type'        => 'Категория',
			'begin'       => 'Дата начала',
			'end'         => 'Дата окончания',
			'geoTitle'    => 'Адрес',
			'tag'         => 'Теги',
			'site'        => 'Сайт события',
			'price'       => 'Стоимость',
		];
	}

	/**
	 * @return EventPrice[]
	 */
	public function getPrice()
	{
		$result = [];
		if (empty($this->_price)) {
			$result[] = new EventPrice();
		}
		else
			foreach ($this->_price as $dt) {
				$result[] = new EventPrice($dt);
			}
		return $result;
	}

	/**
	 * @param array $list
	 */
	public function setPrice(array $list)
	{
		$this->_price = $list;
	}

	public function insert()
	{
		/**
		 * @var User $user
		 */
		$user = \Yii::$app->user->identity;
		$event = new Event();
		$event->geo_description = htmlspecialchars($this->geoDescription);
		$event->geo_title = htmlspecialchars($this->geoTitle);
		list($event->geo_longitude, $event->geo_latitude) = explode(',', $this->geoCoordinates);
		//сохраняем картиночку
		$uploadedFile = $this->img;
		$basePath = \Yii::getAlias('@webroot') . \Yii::$app->params['DIR_EVENT_IMG'];
		$folderName = sha1(uniqid(mt_rand(), true) . ':' . $user->id . ':' . $uploadedFile->name);
		$dir = $basePath . DIRECTORY_SEPARATOR . $folderName;
		$main = Image::getImagine()->open($uploadedFile->tempName);
		FileHelper::createDirectory($dir);
		$main->copy()->thumbnail(new Box(200, 200), ImageInterface::THUMBNAIL_OUTBOUND)->save(
			$dir . '/' . Event::IMAGE_THUMB_MD . '.jpeg'
		);
		$main->copy()->thumbnail(new Box(60, 60), ImageInterface::THUMBNAIL_OUTBOUND)->save(
			$dir . '/' . Event::IMAGE_THUMB_SM . '.jpeg'
		);
//		$main->thumbnail(new Box(600, 300), ImageInterface::THUMBNAIL_OUTBOUND)->save(
//			$dir . '/' . Event::IMAGE_MAIN . '.jpeg'
//		);
        $main->resize($main->getSize()->widen(600))->save(
			$dir . '/' . Event::IMAGE_MAIN . '.jpeg'
		);
        unlink($uploadedFile->tempName);
		$event->event_type_id = $this->type;
		$event->user_id = $user->id;
		$event->name = $this->name;
		$event->description = $this->description;
		$event->begin = (new \DateTime($this->begin))->getTimestamp(); //todo приводим дату к нормальному виду
		if ($this->end) {
			$event->end = (new \DateTime($this->end))->getTimestamp(); //todo приводим дату к нормальному виду
		}
		$event->img = $folderName;
		$event->site = $this->site;
//		$event->price = $this->_price;
		if ($event->save()) {
			$wall = new Wall();

			$wall->setData(
				new NewEvent(
					[
						'userId'  => $user->id,
						'eventId' => $event->id
					]
				)
			);
			$wall->publishTo(
				new WallPost(
					[
						'target_type' => WallPost::TARGET_TYPE_USER,
						'target_id'   => $user->id,
						'personal'    => false
					]
				)
			);
			$subscribers = $user->getSubscribers()->select('subscriber_id')->column();
			if ($subscribers) {
				foreach ($subscribers as $userSub) {
					$wall->publishTo(
						new WallPost(
							[
								'target_type' => WallPost::TARGET_TYPE_USER,
								'target_id'   => $userSub,
								'personal'    => true
							]
						)
					);
				}
			}
			$wall->save();
			if(isset($_POST['EventPrice']) && is_array($_POST['EventPrice'])){
				$i = 1;
				$priceCheck = [];
				foreach ($_POST['EventPrice'] as $data) {
					$ep = new EventPrice($data);
					$ep->event_id = $event->id;
					if($ep->validate() && is_numeric($ep->cost) && !in_array((int)$ep->cost,$priceCheck)){
						$priceCheck[]=(int)$ep->cost;
						$ep->insert(false);
					}
					if($i==10)continue;
					$i++;
				}
			}
			Tag::bind($event, explode(',', $this->tag));
			return $event->id;
		}
		return false;
	}

	/**
	 * @param $event_id
	 * Уведомлеие всех подписчиков мероприятия по емайл при отмеченной галке "Оповестить всех подписчиков" при отправке
	 * коммента
	 * @todo это наверное лучше перенести именно в метод добавления коммента? В модель создания комментария, в
	 *       afterInsert
	 */
	public static function commenatAllNotification($event_id, $message)
	{
		$Subscribers = EventSubscriber::find()->with('user')->where(['event_id' => $event_id])->all();
		$Event = Event::findOne(['id' => $event_id]);
		foreach ($Subscribers as $User) {
			$messages[] = \Yii::$app->mailer->compose(
				'message-all-notify',
				[
					'msg'      => htmlspecialchars($message),
					'notifier' => \Yii::$app->user->identity
				]
			)->setFrom('noreply@findspree.ru')->setTo($User->user->email)->setSubject(
				'Оповещение от владельца мероприятия "' . $Event->name . '"'
			);
		}
		if (isset($messages) && !empty($messages)) \Yii::$app->mailer->sendMultiple($messages);
	}
}