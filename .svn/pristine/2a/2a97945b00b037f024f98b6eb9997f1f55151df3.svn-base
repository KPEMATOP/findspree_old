<?php

namespace common\models;

use common\helpers\Time;
use common\models\Wall\DataContainer;
use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "user_wall".
 * @property string  $id
 * @property string  $created
 * @property string  $mem
 * @property string  $type
 */
class Wall extends \yii\db\ActiveRecord
{
    private $_data;
    /**
     * @var WallPost[]
     */
    private $_wallPostList = [];


    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created',
                'updatedAtAttribute' => false,
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'wall';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['data', 'type'], 'required'],
        ];
    }

    public function fields()
    {
		$fields = parent::fields();
		unset($fields['mem']);
		return array_merge($fields, [
            'data',
            'date' => function () {
                return Time::dateNormalize($this->created);
            },
            'model' => function () {
                return $this->getData()->getModel();
            }
        ]); // TODO: Change the autogenerated stub
    }

    public function setData(DataContainer $WPost)
    {
        $this->_data = $WPost;
        $this->type = $WPost->getType();
    }

    public function publishTo(WallPost $wallPost)
    {
        $this->_wallPostList[] = $wallPost;
        return $this;
    }

    /**
     * @return DataContainer|null
     * @throws \ErrorException
     */
    public function getData()
    {
        if ($this->_data)
            return $this->_data;
        if (!$this->mem)
            return null;
        return $this->_data = DataContainer::convert($this->type, $this->mem);
    }

    public function beforeSave($insert)
    {
        if ($insert) {
            if (!$this->getData() || !$this->getData()->validate()) {
                $this->addError('mem', 'Неверно заполнены данные');
                return false;
            }
            $this->mem = (string)$this->getData();
        }
        return parent::beforeSave($insert);
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes);
        if ($insert) {
            $rows = [];
            foreach ($this->_wallPostList as $row) {
                $rows[] = [$row->target_type, $row->target_id, $this->id, $row->personal];
            }
            if ($rows) {
                return Yii::$app->db->createCommand()
                    ->batchInsert(WallPost::tableName(), ['target_type', 'target_id', 'wall_id', 'personal'], $rows)
                    ->execute();
            }
        }
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'created' => 'Created',
            'data' => 'Data',
            'type' => 'Type',
        ];
    }
}
