<?php
/**
 * Created by PhpStorm.
 * User: albert
 * Date: 22.02.15
 * Time: 3:58
 */

namespace frontend\models;


use common\models\Event;
use common\models\Geo;
use common\models\Tag;
use common\models\User;
use common\models\Wall;
use common\models\Wall\NewEvent;
use common\models\WallPost;
use common\models\EventSubscriber;
use Imagine\Image\Box;
use Imagine\Image\ImageInterface;
use yii\base\Model;
use yii\helpers\FileHelper;
use yii\imagine\Image;
use yii\web\UploadedFile;

class EventForm extends Model
{
	public $name;
	public $description;
	public $begin;
	public $type;
	public $geoCoordinates;
	public $geoTitle;
	public $geoDescription;
	/**
	 * @var UploadedFile
	 */
	public $img;
	public $tag;

	public function rules()
	{
		return [
			[['name', 'description', 'img', 'geoTitle', 'geoDescription', 'geoCoordinates', 'begin'], 'required'],
			[['name', 'description', 'geoTitle', 'geoDescription', 'geoCoordinates'], 'filter', 'filter' => 'trim'],
			//            ['geoCoordinates','filters'=>'trim'],
			[['type'], 'integer'],
			[['name'], 'string', 'max' => 70],
			[['description'], 'string', 'max' => 2400],
			[['tag'], 'safe'],
			[
				'img',
				'image',
				'minWidth'   => 600,
				'minHeight'  => 300,
				'maxWidth'   => 3840,
				'maxHeight'  => 2160,
				'mimeTypes'  => 'image/jpg, image/jpeg',
				'extensions' => ['jpg', 'jpeg'],
				'maxSize'    => (1024 * 5 * 1024)
			],
		];
	}


	public function attributeLabels()
	{
		return [
			'name'        => 'Название',
			'description' => 'Описание',
			'type'        => 'Тип',
			'begin'       => 'Дата события',
			'geoTitle'    => 'Адрес',
			'tag'         => 'Теги',
		];
	}

	public function insert()
	{
		/**
		 * @var User $user
		 */
		$user = \Yii::$app->user->identity;
		$event = new Event();
		$event->geo_description = htmlspecialchars($this->geoDescription);
		$event->geo_title = htmlspecialchars($this->geoTitle);
		list($event->geo_longitude, $event->geo_latitude) = explode(',', $this->geoCoordinates);
		//сохраняем картиночку
		$uploadedFile = $this->img;
		$basePath = \Yii::getAlias('@webroot') . \Yii::$app->params['DIR_EVENT_IMG'];
		$folderName = sha1(uniqid(mt_rand(), true) . ':' . $user->id . ':' . $uploadedFile->name);
		$dir = $basePath . DIRECTORY_SEPARATOR . $folderName;
		$main = Image::getImagine()->open($uploadedFile->tempName);
		FileHelper::createDirectory($dir);
		$main->copy()->thumbnail(new Box(200, 200), ImageInterface::THUMBNAIL_OUTBOUND)->save($dir . '/' . Event::IMAGE_THUMB_MD . '.jpeg');
		$main->copy()->thumbnail(new Box(60, 60), ImageInterface::THUMBNAIL_OUTBOUND)->save($dir . '/' . Event::IMAGE_THUMB_SM . '.jpeg');
		$main->thumbnail(new Box(600, 300), ImageInterface::THUMBNAIL_OUTBOUND)->save($dir . '/' . Event::IMAGE_MAIN . '.jpeg');
		//
		$event->event_type_id = $this->type;
		$event->user_id = $user->id;
		$event->name = htmlspecialchars($this->name);
		$event->description = htmlspecialchars($this->description);

		$datetime = new \DateTime($this->begin);
		$event->begin = $datetime->getTimestamp(); //todo приводим дату к нормальному виду
		$event->img = $folderName;
		if ($event->save()) {
			$wall = new Wall();

			$wall->setData(new NewEvent([
				'userId'  => $user->id,
				'eventId' => $event->id
			]));
			$wall->publishTo(new WallPost([
				'target_type' => WallPost::TARGET_TYPE_USER,
				'target_id'   => $user->id,
				'personal'    => false
			]));
			$subscribers = $user->getSubscribers()->select('subscriber_id')->column();
			if ($subscribers) {
				foreach ($subscribers as $userSub) {
					$wall->publishTo(new WallPost([
						'target_type' => WallPost::TARGET_TYPE_USER,
						'target_id'   => $userSub,
						'personal'    => true
					]));
				}
			}
			$wall->save();
			Tag::bind($event, explode(',', $this->tag));
			return $event->id;
		}
		return false;
	}

	/**
	 * @param $event_id
	 * Уведомлеие всех подписчиков мероприятия по емайл при отмеченной галке "Оповестить всех подписчиков" при отправке
	 * коммента
	 */
	public static function commenatAllNotification($event_id, $message)
	{
		$Subscribers = EventSubscriber::find()->with('user')->where(['event_id' => $event_id])->all();
		$Event = Event::findOne(['id' => $event_id]);
		foreach ($Subscribers as $User) {
			$messages[] = \Yii::$app->mailer->compose('message-all-notify', [
				'msg'      => htmlspecialchars($message),
				'notifier' => \Yii::$app->user->identity
			])->setFrom('noreply@findspree.ru')->setTo($User->user->email)->setSubject('Оповещение от владельца мероприятия "' . $Event->name . '"');
		}
		if (isset($messages) && !empty($messages)) \Yii::$app->mailer->sendMultiple($messages);
	}
}