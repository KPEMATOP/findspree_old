<?php
/**
 * Created by PhpStorm.
 * User: dev
 * Date: 05.03.15
 * Time: 18:19
 */

namespace common\models;

use common\models\Wall\SubscribeEvent;

/**
 * Class EventSubscriber
 * @package common\models
 * @property int  $id
 * @property int  $event_id
 * @property int  $user_id
 * @property User $user
 */
class EventSubscriber extends \yii\db\ActiveRecord
{
	/**
	 * @inheritdoc
	 */
	public static function tableName()
	{
		return 'event_subscriber';
	}

	public function fields()
	{
		return array_merge(parent::fields(), ['user']);
	}

	public function getUser()
	{
		return $this->hasOne(User::className(), ['id' => 'user_id']);
	}

	public function afterDelete()
	{
		parent::afterDelete(); // TODO: Change the autogenerated stub
		$wall = new Wall();

		$wall->setData(new SubscribeEvent([
			'userId'  => $this->user_id,
			'eventId' => $this->event_id,
			'status'  => SubscribeEvent::STATUS_UNSUBSCRIBE
		]));
		$wall->publishTo(new WallPost(['target_id' => $this->user_id, 'personal' => false]));
		foreach ($this->user->subscribers as $subscriber) {
			$wall->publishTo(new WallPost([
				'target_id' => $subscriber->id,
				'personal'  => true
			]));
		}
		$wall->save(false);
	}

	public function afterSave($insert, $changedAttributes)
	{
		parent::afterSave($insert, $changedAttributes);
		if ($insert) {
			$wall = new Wall();
			$wall->setData(new SubscribeEvent([
				'userId'  => $this->user_id,
				'eventId' => $this->event_id,
				'status'  => SubscribeEvent::STATUS_SUBSCRIBE
			]));
			$wall->publishTo(new WallPost([
				'target_id' => $this->user_id,
				'personal'  => false
			]));
			foreach ($this->user->subscribers as $subscriber) {
				$wall->publishTo(new WallPost([
					'target_id' => $subscriber->id,
					'personal'  => true
				]));
			}
			$wall->save(false);
		}
	}


}